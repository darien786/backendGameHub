// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backendGameHub.Data;

#nullable disable

namespace backendGameHub.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20240524203639_CreacionInicial")]
    partial class CreacionInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoriaJuego", b =>
                {
                    b.Property<int>("categoriascategoriaId")
                        .HasColumnType("integer");

                    b.Property<int>("juegosjuegoId")
                        .HasColumnType("integer");

                    b.HasKey("categoriascategoriaId", "juegosjuegoId");

                    b.HasIndex("juegosjuegoId");

                    b.ToTable("CategoriaJuego");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ef404a9f-8efb-4de9-9b4f-05705d604bac",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "4a3f9656-b7a3-4d56-bbf3-910c26e0eb92",
                            Name = "Recepcionista",
                            NormalizedName = "RECEPCIONISTA"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "4ecf76a1-704f-46f5-9d58-2ba8ad601845",
                            RoleId = "ef404a9f-8efb-4de9-9b4f-05705d604bac"
                        },
                        new
                        {
                            UserId = "df98ea20-9e1f-4bf7-9501-74cd4126a0bc",
                            RoleId = "4a3f9656-b7a3-4d56-bbf3-910c26e0eb92"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("backendGameHub.Models.Categoria", b =>
                {
                    b.Property<int>("categoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("categoriaId"));

                    b.Property<string>("nombre_categoria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("categoriaId");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("backendGameHub.Models.CustomIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("protegido")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4ecf76a1-704f-46f5-9d58-2ba8ad601845",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa72f48f-7179-4f05-a99c-e047533a0cf1",
                            Email = "zkorpio12",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ZKORPIO12",
                            NormalizedUserName = "ZKORPIO12",
                            PasswordHash = "AQAAAAIAAYagAAAAEP3I1AvELGNfAlZwQuZCA978uZQnEkNgIwvV5wzyXMdRu4ptDbHjtxtfllF0o+e7Uw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c559b1b0-d536-4eab-87db-6cd68b3d0447",
                            TwoFactorEnabled = false,
                            UserName = "zkorpio12",
                            nombre = "Uriel",
                            protegido = true
                        },
                        new
                        {
                            Id = "df98ea20-9e1f-4bf7-9501-74cd4126a0bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "142aa57e-e6b0-437f-bba3-1b661028d2e3",
                            Email = "patito123",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATITO123",
                            NormalizedUserName = "PATITO123",
                            PasswordHash = "AQAAAAIAAYagAAAAEGZFpXXMvfJj0KwRGsb7Cf9Scl0aUALo6ZLskZBorLc1iBAyxxXyFehOjS3lxluWNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb8fc689-9e5d-46b4-bb5e-ff6754f5c13e",
                            TwoFactorEnabled = false,
                            UserName = "patito123",
                            nombre = "Pato Gonzalez Perez",
                            protegido = false
                        });
                });

            modelBuilder.Entity("backendGameHub.Models.Disponibilidad", b =>
                {
                    b.Property<int>("disponibilidadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("disponibilidadId"));

                    b.Property<string>("nombre_disponibilidad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("disponibilidadId");

                    b.ToTable("Disponibilidad");

                    b.HasData(
                        new
                        {
                            disponibilidadId = 1,
                            nombre_disponibilidad = "Disponible"
                        },
                        new
                        {
                            disponibilidadId = 2,
                            nombre_disponibilidad = "Ocupado"
                        },
                        new
                        {
                            disponibilidadId = 3,
                            nombre_disponibilidad = "En mantenimiento"
                        });
                });

            modelBuilder.Entity("backendGameHub.Models.Equipo", b =>
                {
                    b.Property<int>("equipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("equipoId"));

                    b.Property<int?>("disponibilidadId")
                        .HasColumnType("integer");

                    b.Property<string>("marca")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("modelo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("url_imagen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("equipoId");

                    b.HasIndex("disponibilidadId");

                    b.ToTable("Equipos");

                    b.HasData(
                        new
                        {
                            equipoId = 1,
                            disponibilidadId = 1,
                            marca = "DELL",
                            modelo = "50i",
                            nombre = "PC Gamer Delios",
                            url_imagen = "https://th.bing.com/th/id/OIP.pqgvcdzTUqEg1Dn4TB6p9QHaHa?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            equipoId = 2,
                            disponibilidadId = 1,
                            marca = "DELL",
                            modelo = "R11",
                            nombre = "Alienware Aurora",
                            url_imagen = "https://th.bing.com/th/id/OIP.ybUvOyf2tQLPRjKpvZqhPgHaHa?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            equipoId = 3,
                            disponibilidadId = 1,
                            marca = "HP",
                            modelo = "30L",
                            nombre = "HP Omen",
                            url_imagen = "https://th.bing.com/th/id/OIP.kuD2oV-5Gh6pxBKcC5BltAHaFj?rs=1&pid=ImgDetMain"
                        },
                        new
                        {
                            equipoId = 4,
                            disponibilidadId = 1,
                            marca = "ASUS",
                            modelo = "G15",
                            nombre = "ASUS ROG Strix",
                            url_imagen = "https://th.bing.com/th/id/R.62ff86997b0fa6088ffdd0cc6c50db28?rik=k3MAQ1hNeojL7A&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            equipoId = 5,
                            disponibilidadId = 3,
                            marca = "MSI",
                            modelo = "Arctic",
                            nombre = "MSI Trident 3",
                            url_imagen = "https://www.bhphotovideo.com/images/images2500x2500/msi_mpg_trident_3_12tc_007us_trident_3_i7f_3060_1709605.jpg"
                        },
                        new
                        {
                            equipoId = 6,
                            disponibilidadId = 1,
                            marca = "Microsoft",
                            modelo = "1TB",
                            nombre = "Xbox Series S",
                            url_imagen = "https://th.bing.com/th/id/R.2abcd1e0694b7d96057df2ffc77b5ac9?rik=MtyoTVw3ZbrXYw&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            equipoId = 7,
                            disponibilidadId = 1,
                            marca = "Microsoft",
                            modelo = "1TB",
                            nombre = "Xbox Series S",
                            url_imagen = "https://th.bing.com/th/id/R.2abcd1e0694b7d96057df2ffc77b5ac9?rik=MtyoTVw3ZbrXYw&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            equipoId = 8,
                            disponibilidadId = 1,
                            marca = "Microsoft",
                            modelo = "1TB",
                            nombre = "Xbox Series S",
                            url_imagen = "https://th.bing.com/th/id/R.2abcd1e0694b7d96057df2ffc77b5ac9?rik=MtyoTVw3ZbrXYw&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            equipoId = 9,
                            disponibilidadId = 1,
                            marca = "Microsoft",
                            modelo = "1TB",
                            nombre = "Xbox Series S",
                            url_imagen = "https://th.bing.com/th/id/R.2abcd1e0694b7d96057df2ffc77b5ac9?rik=MtyoTVw3ZbrXYw&pid=ImgRaw&r=0"
                        },
                        new
                        {
                            equipoId = 10,
                            disponibilidadId = 3,
                            marca = "Microsoft",
                            modelo = "1TB",
                            nombre = "Xbox Series S",
                            url_imagen = "https://th.bing.com/th/id/R.2abcd1e0694b7d96057df2ffc77b5ac9?rik=MtyoTVw3ZbrXYw&pid=ImgRaw&r=0"
                        });
                });

            modelBuilder.Entity("backendGameHub.Models.Estatus", b =>
                {
                    b.Property<int>("estatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("estatusId"));

                    b.Property<string>("nombre_estatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("estatusId");

                    b.ToTable("Estatus");

                    b.HasData(
                        new
                        {
                            estatusId = 1,
                            nombre_estatus = "Activo"
                        },
                        new
                        {
                            estatusId = 2,
                            nombre_estatus = "Inactivo"
                        });
                });

            modelBuilder.Entity("backendGameHub.Models.Juego", b =>
                {
                    b.Property<int>("juegoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("juegoId"));

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("estatusId")
                        .HasColumnType("integer");

                    b.Property<string>("nombre_juego")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("plataforma")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("url_imagen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("juegoId");

                    b.HasIndex("estatusId");

                    b.ToTable("Juegos");
                });

            modelBuilder.Entity("CategoriaJuego", b =>
                {
                    b.HasOne("backendGameHub.Models.Categoria", null)
                        .WithMany()
                        .HasForeignKey("categoriascategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendGameHub.Models.Juego", null)
                        .WithMany()
                        .HasForeignKey("juegosjuegoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("backendGameHub.Models.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("backendGameHub.Models.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendGameHub.Models.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("backendGameHub.Models.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backendGameHub.Models.Equipo", b =>
                {
                    b.HasOne("backendGameHub.Models.Disponibilidad", "disponibilidad")
                        .WithMany("equipos")
                        .HasForeignKey("disponibilidadId");

                    b.Navigation("disponibilidad");
                });

            modelBuilder.Entity("backendGameHub.Models.Juego", b =>
                {
                    b.HasOne("backendGameHub.Models.Estatus", "estatus")
                        .WithMany("juegos")
                        .HasForeignKey("estatusId");

                    b.Navigation("estatus");
                });

            modelBuilder.Entity("backendGameHub.Models.Disponibilidad", b =>
                {
                    b.Navigation("equipos");
                });

            modelBuilder.Entity("backendGameHub.Models.Estatus", b =>
                {
                    b.Navigation("juegos");
                });
#pragma warning restore 612, 618
        }
    }
}
