// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backendGameHub.Data;

#nullable disable

namespace backendGameHub.Migrations
{
    [DbContext(typeof(IdentityContext))]
    partial class IdentityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoriaJuego", b =>
                {
                    b.Property<int>("categoriascategoriaId")
                        .HasColumnType("integer");

                    b.Property<int>("juegosjuegoId")
                        .HasColumnType("integer");

                    b.HasKey("categoriascategoriaId", "juegosjuegoId");

                    b.HasIndex("juegosjuegoId");

                    b.ToTable("CategoriaJuego");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "47da9c06-f8eb-4cd4-952f-4455a8a9945f",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "16d567e5-d346-434a-a244-3258da9e60b1",
                            Name = "Recepcionista",
                            NormalizedName = "RECEPCIONISTA"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ab3282c5-946e-4a67-8479-9bc4e05de990",
                            RoleId = "47da9c06-f8eb-4cd4-952f-4455a8a9945f"
                        },
                        new
                        {
                            UserId = "15e9653f-2fb1-4fb7-bd02-de48af657500",
                            RoleId = "16d567e5-d346-434a-a244-3258da9e60b1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("backendGameHub.Models.Categoria", b =>
                {
                    b.Property<int>("categoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("categoriaId"));

                    b.Property<string>("nombre_categoria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("categoriaId");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("backendGameHub.Models.CustomIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("protegido")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ab3282c5-946e-4a67-8479-9bc4e05de990",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af55a5d9-9914-41b7-8853-4052d319102e",
                            Email = "zkorpio12",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ZKORPIO12",
                            NormalizedUserName = "ZKORPIO12",
                            PasswordHash = "AQAAAAIAAYagAAAAEC8Sfx+6gbz5UUo+Qjy1z2InDj/Gt2nYRlDAzFiMP48f5qJQeBCO3goYU0R1tYeFiw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73a8adfc-386d-4bf6-bd77-e3237f172a98",
                            TwoFactorEnabled = false,
                            UserName = "zkorpio12",
                            nombre = "Uriel",
                            protegido = true
                        },
                        new
                        {
                            Id = "15e9653f-2fb1-4fb7-bd02-de48af657500",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d7beace-6a4f-4078-8137-e2407727f764",
                            Email = "patito123",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATITO123",
                            NormalizedUserName = "PATITO123",
                            PasswordHash = "AQAAAAIAAYagAAAAENutlkf2bm5Ajg/0IZalu+WyJbryJb3MbZhhvpAY6efgOZIJ861OlT59Tse6qKvEzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b0ff036d-157d-4da6-9fae-d574d77c5785",
                            TwoFactorEnabled = false,
                            UserName = "patito123",
                            nombre = "Pato Gonzalez Perez",
                            protegido = false
                        });
                });

            modelBuilder.Entity("backendGameHub.Models.Empleado", b =>
                {
                    b.Property<int>("empleadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("empleadoId"));

                    b.Property<string>("correo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("curp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("estatusId")
                        .HasColumnType("integer");

                    b.Property<string>("fecha_baja")
                        .HasColumnType("text");

                    b.Property<string>("fecha_ingreso")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("personaId")
                        .HasColumnType("integer");

                    b.Property<int>("rolId")
                        .HasColumnType("integer");

                    b.Property<string>("sexo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("empleadoId");

                    b.HasIndex("estatusId");

                    b.HasIndex("personaId");

                    b.HasIndex("rolId");

                    b.ToTable("Empleados");
                });

            modelBuilder.Entity("backendGameHub.Models.Estatus", b =>
                {
                    b.Property<int>("estatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("estatusId"));

                    b.Property<string>("nombre_estatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("estatusId");

                    b.ToTable("Estatus");

                    b.HasData(
                        new
                        {
                            estatusId = 1,
                            nombre_estatus = "Activo"
                        },
                        new
                        {
                            estatusId = 2,
                            nombre_estatus = "Inactivo"
                        });
                });

            modelBuilder.Entity("backendGameHub.Models.Juego", b =>
                {
                    b.Property<int>("juegoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("juegoId"));

                    b.Property<string>("categoria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("estatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("estatusId")
                        .HasColumnType("integer");

                    b.Property<string>("nombre_juego")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("plataforma")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("url_imagen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("juegoId");

                    b.HasIndex("estatusId");

                    b.ToTable("Juego");
                });

            modelBuilder.Entity("backendGameHub.Models.Persona", b =>
                {
                    b.Property<int>("personaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("personaId"));

                    b.Property<string>("apellido_materno")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("apellido_paterno")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("telefono")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("personaId");

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("backendGameHub.Models.Rol", b =>
                {
                    b.Property<int>("rolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("rolId"));

                    b.Property<string>("nombre_rol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("rolId");

                    b.ToTable("Rol");

                    b.HasData(
                        new
                        {
                            rolId = 1,
                            nombre_rol = "Administrador"
                        },
                        new
                        {
                            rolId = 2,
                            nombre_rol = "Recepcionista"
                        });
                });

            modelBuilder.Entity("CategoriaJuego", b =>
                {
                    b.HasOne("backendGameHub.Models.Categoria", null)
                        .WithMany()
                        .HasForeignKey("categoriascategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendGameHub.Models.Juego", null)
                        .WithMany()
                        .HasForeignKey("juegosjuegoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("backendGameHub.Models.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("backendGameHub.Models.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendGameHub.Models.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("backendGameHub.Models.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backendGameHub.Models.Empleado", b =>
                {
                    b.HasOne("backendGameHub.Models.Estatus", "estatus")
                        .WithMany("empleados")
                        .HasForeignKey("estatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendGameHub.Models.Persona", "persona")
                        .WithMany("empleados")
                        .HasForeignKey("personaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backendGameHub.Models.Rol", "rol")
                        .WithMany("empleados")
                        .HasForeignKey("rolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("estatus");

                    b.Navigation("persona");

                    b.Navigation("rol");
                });

            modelBuilder.Entity("backendGameHub.Models.Juego", b =>
                {
                    b.HasOne("backendGameHub.Models.Estatus", null)
                        .WithMany("juegos")
                        .HasForeignKey("estatusId");
                });

            modelBuilder.Entity("backendGameHub.Models.Estatus", b =>
                {
                    b.Navigation("empleados");

                    b.Navigation("juegos");
                });

            modelBuilder.Entity("backendGameHub.Models.Persona", b =>
                {
                    b.Navigation("empleados");
                });

            modelBuilder.Entity("backendGameHub.Models.Rol", b =>
                {
                    b.Navigation("empleados");
                });
#pragma warning restore 612, 618
        }
    }
}
